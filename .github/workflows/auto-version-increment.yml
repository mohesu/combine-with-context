name: Auto Version Increment

# Trigger on push to main branch
on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  version-increment:
    # Only run if commit message contains release keywords
    if: contains(github.event.head_commit.message, '#release') || contains(github.event.head_commit.message, '#Release') || contains(github.event.head_commit.message, '#publish') || contains(github.event.head_commit.message, '#Publish')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use a token with write permissions to push tags
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Increment version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          
          # Split version into parts (major.minor.patch)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update package.json
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          # Update package.json version using npm
          npm version --no-git-tag-version $NEW_VERSION
          echo "Updated package.json to version $NEW_VERSION"

      - name: Update build.gradle.kts
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          # Update version in build.gradle.kts
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" jetbrains-plugin/build.gradle.kts
          echo "Updated build.gradle.kts to version $NEW_VERSION"

      - name: Verify changes
        run: |
          echo "=== package.json version ==="
          node -p "require('./package.json').version"
          echo "=== build.gradle.kts version ==="
          grep "^version = " jetbrains-plugin/build.gradle.kts

      - name: Commit version changes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git add package.json jetbrains-plugin/build.gradle.kts
          git commit -m "Bump version to $NEW_VERSION [skip ci]"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          TAG_NAME="v$NEW_VERSION"
          
          # Create tag
          git tag $TAG_NAME
          echo "Created tag $TAG_NAME"
          
          # Push commit and tag
          git push origin main
          git push origin $TAG_NAME
          echo "Pushed tag $TAG_NAME"
          
          echo "Version increment complete. Tag-based workflows should now trigger."