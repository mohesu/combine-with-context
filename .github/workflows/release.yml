name: Create Release

# Trigger on version tags (e.g., v2.5.0, v1.0.0)
on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  # Build VS Code extension (.vsix file)
  build_vscode:
    runs-on: ubuntu-latest
    concurrency:
      group: build-vscode-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build extension
        run: pnpm run package

      - name: Package extension
        run: pnpm exec vsce package --no-dependencies

      - name: Upload VS Code artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: ./*.vsix

  # Build JetBrains plugin (.zip file)
  build_intellij:
    runs-on: ubuntu-latest
    concurrency:
      group: build-intellij-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Make gradlew executable
        working-directory: ./jetbrains-plugin
        run: chmod +x gradlew

      - name: Build plugin
        working-directory: ./jetbrains-plugin
        run: ./gradlew buildPlugin

      - name: Upload IntelliJ artifact
        uses: actions/upload-artifact@v4
        with:
          name: intellij-plugin
          path: jetbrains-plugin/build/distributions/*.zip

  # Create GitHub release with both artifacts
  create_release:
    needs: [build_vscode, build_intellij]
    runs-on: ubuntu-latest
    concurrency:
      group: create-release-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download VS Code artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension
          path: ./artifacts

      - name: Download IntelliJ artifact
        uses: actions/download-artifact@v4
        with:
          name: intellij-plugin
          path: ./artifacts

      - name: Determine artifact names
        id: names
        run: |
          VSIX=$(ls artifacts/*.vsix | head -1)
          ZIP=$(ls artifacts/*.zip | head -1)
          echo "vsix_name=$(basename "$VSIX")" >> $GITHUB_OUTPUT
          echo "plugin_name=$(basename "$ZIP")" >> $GITHUB_OUTPUT

      - name: Generate checksums
        run: |
          cd artifacts
          for f in *; do
            if [ -f "$f" ]; then
              sha256sum "$f" > "$f.sha256"
            fi
          done
          ls -la

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/*
          name: "Release ${{ github.ref_name }}"
          body: |
            ## Combined Release ${{ github.ref_name }}
            
            This release includes both the VS Code extension and JetBrains plugin.
            
            ### VS Code Extension
            **File**: `${{ steps.names.outputs.vsix_name }}`
            
            **Installation**:
            - Download the `.vsix` file
            - In VS Code: Command Palette → "Extensions: Install from VSIX..."
            - Or via command line: `code --install-extension ${{ steps.names.outputs.vsix_name }}`
            
            ### JetBrains Plugin
            **File**: `${{ steps.names.outputs.plugin_name }}`
            
            **Installation**:
            1. Download the `.zip` file
            2. In your JetBrains IDE: **File** → **Settings** → **Plugins**
            3. Click gear icon → **Install Plugin from Disk...**
            4. Choose the downloaded `.zip` file and restart IDE
            
            **Supported IDEs**: IntelliJ IDEA, WebStorm, PyCharm, Android Studio, PhpStorm, CLion, RubyMine, DataGrip, Rider, GoLand, and other JetBrains IDEs
            
            ### Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.md) for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_marketplaces:
    name: Publish VS Code extension to marketplaces
    needs: [build_vscode]
    runs-on: ubuntu-latest
    env:
      OPEN_VSX_TOKEN: ${{ secrets.OPEN_VSX_TOKEN }}
      VS_MARKETPLACE_TOKEN: ${{ secrets.VS_MARKETPLACE_TOKEN }}
    steps:
      - name: Download VS Code artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension
          path: ./artifacts

      - name: Find VSIX file
        id: find_vsix
        run: echo "path=$(ls artifacts/*.vsix | head -1)" >> $GITHUB_OUTPUT

      - name: List artifacts
        run: ls -la ./artifacts

      - name: Publish to Open VSX Registry
        uses: HaaLeo/publish-vscode-extension@v1
        with:
          pat: ${{ env.OPEN_VSX_TOKEN }}
          extensionFile: ${{ steps.find_vsix.outputs.path }}
          registryUrl: https://open-vsx.org
          skipDuplicate: true
        if: ${{ env.OPEN_VSX_TOKEN != '' }}

      - name: Publish to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v1
        with:
          pat: ${{ env.VS_MARKETPLACE_TOKEN }}
          registryUrl: https://marketplace.visualstudio.com
          extensionFile: ${{ steps.find_vsix.outputs.path }}
          skipDuplicate: true
        if: ${{ env.VS_MARKETPLACE_TOKEN != '' }}

  publish_jetbrains:
    name: Publish JetBrains plugin (optional)
    needs: [build_intellij]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Make gradlew executable
        working-directory: ./jetbrains-plugin
        run: chmod +x gradlew

      - name: Publish plugin to JetBrains Marketplace
        working-directory: ./jetbrains-plugin
        run: |
          if [ -z "$PUBLISH_TOKEN" ]; then
            echo "PUBLISH_TOKEN not set; skipping publish to JetBrains Marketplace."
          else
            ./gradlew publishPlugin
          fi